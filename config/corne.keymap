/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E                 &kp R                 &kp T        &kp Y                &kp U               &kp I               &kp O    &lt 3 P   &none
&none  &kp A  &kp S  &kp D                 &kp F                 &kp G        &kp H                &kp J               &kp K               &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C                 &kp V                 &kp B        &lt 2 N              &kp M               &mt LEFT_ALT COMMA  &kp DOT  &kp FSLH  &none
                     &mt LEFT_COMMAND DEL  &mt LEFT_CONTROL TAB  &kp SPACE    &mt RIGHT_SHIFT RET  &mt RALT BACKSPACE  &lt 1 ESCAPE
            >;
        };

        nums {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1       &kp N2    &kp N3                &kp N4                &kp N5                  &kp N6                 &kp N7                  &kp N8                  &kp N9     &kp N0     &none
&none  &kp PERCENT  &kp HASH  &kt UP                &kp LEFT_ARROW        &kp LEFT_BRACKET        &kp LEFT_BRACKET       &kp RIGHT               &kp DOWN_ARROW          &kp MINUS  &kp PLUS   &none
&none  &kp CARET    &kp AMPS  &kp LC(LA(UP_ARROW))  &kp LS(LA(UP_ARROW))  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp LS(LA(DOWN_ARROW))  &kp LA(LC(DOWN_ARROW))  &kp EQUAL  &kp ASTRK  &none
                              &kp LEFT_GUI          &kp LG(LCTRL)         &kp LALT                &kp LSHFT              &kp LA(F13)             &trans
            >;
        };

        funcs {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp F1         &kp F2     &kp F3     &kp F4             &kp F5             &kp F6         &kp F7        &kp F8        &kp F9      &kp F10  &none
&none  &kp PAGE_UP    &kp LC(A)  &kp LC(C)  &kp LS(LC(C))      &kp LC(LS(R))      &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &kp F11  &none
&none  &kp PAGE_DOWN  &kp LC(X)  &kp HOME   &kp END            &kp PRINTSCREEN    &trans         &out OUT_USB  &out OUT_BLE  &kp INS     &kp F12  &none
                                 &trans     &kp LC(BACKSPACE)  &kp LS(ENTER)      &kp LC(ENTER)  &kp LA(F13)   &trans
            >;
        };

        more_stuff {
            bindings = <
&trans  &kp LC(TAB)  &trans  &trans  &kp LS(LC(R))  &kp LS(LC(T))     &kp LG(LA(I))     &kp LA(LG(R))  &kp LA(LG(V))  &kp LA(LG(D))  &trans  &trans
&trans  &trans       &trans  &trans  &trans         &kp LEFT_BRACE    &kp RIGHT_BRACE   &trans         &trans         &trans         &trans  &trans
&trans  &kp LA(F4)   &trans  &trans  &trans         &kp LESS_THAN     &kp GREATER_THAN  &trans         &trans         &trans         &trans  &trans
                             &trans  &trans         &trans            &trans            &trans         &trans
            >;
        };
    };
};
